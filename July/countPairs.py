# 题目1711：
# 大餐 是指 恰好包含两道不同餐品 的一餐，其美味程度之和等于 2 的幂。
#
# 你可以搭配 任意 两道餐品做一顿大餐。
#
# 给你一个整数数组 deliciousness ，其中 deliciousness[i] 是第 i道餐品的美味程度，返回你可以用数组中的餐品做出的不同 大餐 的数量。结果需要对
# 109 + 7 取余。
#
# 注意，只要餐品下标不同，就可以认为是不同的餐品，即便它们的美味程度相同。
#
#
# 示例 1：
#
# 输入：deliciousness = [1,3,5,7,9]
# 输出：4
# 解释：大餐的美味程度组合为 (1,3) 、(1,7) 、(3,5) 和 (7,9) 。
# 它们各自的美味程度之和分别为 4 、8 、8 和 16 ，都是 2 的幂。
# 示例 2：
#
# 输入：deliciousness = [1,1,1,3,3,3,7]
# 输出：15
# 解释：大餐的美味程度组合为 3 种 (1,1) ，9 种 (1,3) ，和 3 种 (1,7) 。

# 题解1：
# 思路：将给定的数组的各个食物按照美味程度计数，美味程度 <= 2^20 ,所以大餐的美味程度 <= 2^21,遍历所有可能的大餐的美味程度，将遍历到可能的大餐的
# 美味程度减去当前的美味程度，如果计数字典中存在该美味程度，则该美味程度对应的values值为大餐的数量

import collections


def countPairs(self, deliciousness: list[int]) -> int:
    c = collections.Counter(deliciousness)
    mod = 10 ** 9 + 7
    res = 0
    for i in deliciousness:
        c[i] -= 1
        for j in range(22):
            res += c[(1 << j) - i]
    return res % mod
